#include <stdio.h>

#include <string.h>

#define S "0"  // reSet color

#define L "1"  // add light to the color

#define D "2"  // dark color

#define E "22" // normal color

#define V "91" // Red

#define G "32" // Green

#define Y "93" // Yellow

#define B "34" // blue

#define M "35" // Purple

#define C "96" // Cyan

#define W "37" // White

#define PCOLOR(X) "\x1b[" X "m" // macro pour ajouter la couleur facilement, le X est

                // l'emplacement du code couleur, au forma "nombre"

typedef struct {

    int reveal;//=1 si la carte a Ã©tÃ© retourner

    int isfull;//=1 is la carte n'est pas vide

    char content;// /!\ a implÃ©menter dans affichage :effet sur la couleur : 1 iluminÃ©, 2 assombrie, 22 anule les effet 1 et 2, 5 clignotant(ne fonctionne pas en Ã©mulateur), 25 annule le clignotement 

    short colorIn;//couleur du content en case 1, effet en case 2

    short colorOut;//couleur de l'exterieur en case 1, effet en case 2

    short back;//couleur de l'ariÃ¨re plan (not in use right now)

}carte;

typedef struct {

    int x;

    int y;

}placement;

typedef struct {

    char name[20];

    placement position;

    short color;

    char Race;

    int inventaireArme;

    char inventaireItem;

    char armeSelect;

}Joueur;

void choixRace(Joueur* bob){

printf("Choisissez votre race entre:\n c : le Chevalier\n r : le Ranger\n m : le mage\n v : le Voleur\n"); // Choose what kind of character u want to be.

char race;

do{

    

    scanf("%c",&race);

    

    if (race == 'c'){

        (*bob).Race = 'c'; // c = knight

    }

    if (race == 'r'){

        (*bob).Race = 'r'; // r = ranger

    }

    if (race == 'm'){

        (*bob).Race = 'm'; // m = mage

    }

    if (race == 'v'){

        (*bob).Race = 'v'; // v = thief

}

    }while(race != 'c' || 'r' || 'm' || 'v');

        printf("Choix de race erronÃ©.\nVeuillez choisir Ã  nouveau.\n"); // If none of this letters have been choosen, it ask again and you have to choose one more time.

   

}

void choixArme(Joueur* bob){

    

printf("choisissez votre arme parmis\n1: bouclier rÃ©flÃ©chissant\n2: torche\n3: hache de pierre\n4: arc\n"); // Choose which weapon you want to use before a fight.

int arme;

do{

    scanf("%d", &arme);

    if (arme == 1){

        (*bob).armeSelect = 1; // If 1, you take a reflective shield.

    }

    if (arme == 2){

        (*bob).armeSelect = 2; // If 2, you take a torch.

    }

    if (arme == 3){

        (*bob).armeSelect = 3; // If 3, you take a stone axe.

    }

    if (arme == 4){

        (*bob).armeSelect = 4; // If 4, you take a bow.

    }

}

    while(arme != 1 || 2 || 3 || 4);

        printf("Choix d'arme incorrect. \nVeuillez choisir Ã  nouveau.\n"); // If none of this number have been selected, it ask again to choose a weapon until you selected a good one.

}

    

int Combat(Joueur* bob, char contenuCase, carte** mainMap){ // If the player keep the good weapon against the right monster, it clears the box and let the player continue is journey. In other case, his turn ends now.

    

contenuCase = mainMap[(*bob).position.x][(*bob).position.y].content; 

    

    if(contenuCase == 'B' && (*bob).armeSelect == 1){ // In case of it's a basiliks and the player keep the shield, he can continue.

        mainMap[(*bob).position.x][(*bob).position.y].content = ' ';

        return 1;

    }

    if(contenuCase == 'Z' && (*bob).armeSelect == 2){ // In case of it's a zombie and the player keep the torch, he can continue.

        mainMap[(*bob).position.x][(*bob).position.y].content = ' ';

        return 1;

    }

    if(contenuCase == 'T' && (*bob).armeSelect == 3){ // In case of it's a troll and the player keep the axe, he can continue.

        mainMap[(*bob).position.x][(*bob).position.y].content = ' ';

        return 1;

    }

    if(contenuCase == 'H' && (*bob).armeSelect == 4){ // In case of it's a harpy eagle and the player keep the bow, he can continue.

        mainMap[(*bob).position.x][(*bob).position.y].content = ' ';

        return 1;

    }

    else{

        return 0; // If combinations are wrong, his turn ends now.

    }

}

int armeAntique(Joueur* bob, char contenuCase){ // Makes the player keep his mythic weapon.

    if(contenuCase == 'A' && (*bob).Race == 'c' && 'A' == 'e'){  // If the box contains an ancient weapon and the playerâ€™s race is a knight and the weapon is the sword of fire, then he takes the weapon.

        (*bob).inventaireArme == 'e';

        return 1;

    }

    if(contenuCase == 'A' && (*bob).Race == 'r' && 'A' == 'b'){  // If the box contains an antique weapon and the playerâ€™s race is a ranger and the weapon is the pet control stick, then he takes the weapon.

        (*bob).inventaireArme == 'b';

        return 1;

    }

    if(contenuCase == 'A' && (*bob).Race == 'm' && 'A' == 'g'){  // If the box contains an ancient weapon and the playerâ€™s race is a magician and the weapon is the forbidden grimoire, then he takes the weapon.

        (*bob).inventaireArme == 'g';

        return 1;

    }

    if(contenuCase == 'A' && (*bob).Race == 'v' && 'A' == 'd'){  // If the box contains an ancient weapon and the playerâ€™s race is a thief and the weapon is the sleeping dagger, then he takes the weapon.

        (*bob).inventaireArme == 'd';

        return 1;

    }

    else{

        return 0;

    }

}

int Coffre(Joueur* bob, char contenuCase){ // If a chest is found.

    if(contenuCase == 'C' && (*bob).inventaireArme == 0){ // If the player finds a chest whitout having his mythic weapon, he grabs the content of the chest, but he must find his mythic weapon.

       (*bob).inventaireItem == 1;

       return 1;

    }

    else{

        return 0;

    }

}

int finDujeu(Joueur* bob){ // End of the game

    

    if((*bob).inventaireItem == 1 && (*bob).inventaireArme == 1 || 2 || 3 || 4){ // If a player get his chest AND his mythic weapon, he wins the game.

    printf("FELICITATION ! Vous avez gagnÃ© !\n");

    }  

}

    

int restart(){ // Restart game ?

    int restart = 2;

        do{

        printf("Voulez-vous rejouer ?\n1 : Oui.\n 2 : Non."); // Choose 1 to play again and 0 to stop the game.

        scanf("%d\n", &restart);

        if(restart == 1){

            return 1;

        }

        if( restart == 0){

            return 0;

        }

        printf("Je n'ai pas compris. Voulez-vous rejouer ?"); // If other than 1 or 2, it will ask you to choose again until you choose a correct answer.

        }

        while(restart != 0 || restart != 1);

}

    

    

    

void croixDirectionnelle(){ // graphic design of the D-pad

printf("              â•”â•â•â•â•â•â•—               \n");

printf("              â•‘  W  â•‘               \n");

printf("              â•šâ•â•â•â•â•â•               \n");

printf("              â•”â•â•â•â•â•â•—               \n");

printf("    â•”â•â•â•â•â•â•— â•”â•â•     â•šâ•â•— â•”â•â•â•â•â•â•—     \n");

printf("    â•‘  A  â•‘ â•‘         â•‘ â•‘  D  â•‘     \n");

printf("    â•šâ•â•â•â•â•â• â•šâ•â•—     â•”â•â• â•šâ•â•â•â•â•â•     \n");

printf("              â•šâ•â•â•â•â•â•               \n");

printf("              â•”â•â•â•â•â•â•—               \n");

printf("              â•‘  S  â•‘               \n");

printf("              â•šâ•â•â•â•â•â•               \n");

}

    

    

    

    

int ecranTitre(){   // graphic design of the Tittle Screen.

    printf(PCOLOR(Y)"-------------------------------------------------------------\n"); printf(PCOLOR(V));

    printf("-                                                           -\n");  printf(PCOLOR(Y));

    printf("-                                                           -\n"); printf(PCOLOR(V));

    printf("-                       "); printf(PCOLOR(C)"*"); printf(PCOLOR(Y)"                                   -\n");

    printf("-                      "); printf(PCOLOR(C)"*"); printf(PCOLOR(Y)"                                    -\n"); printf(PCOLOR(V));

    printf(PCOLOR(V)"-                     "); printf(PCOLOR(C)"*"); printf(PCOLOR(V)"                                     -\n"); printf(PCOLOR(Y));

    printf("-                                                           -\n");  printf(PCOLOR(V));

    printf("-     "); printf(PCOLOR(C)"***     ***  ********  ***     ***       ****"); printf(PCOLOR(V)"         -\n"); printf(PCOLOR(Y));

    printf("-     "); printf(PCOLOR(C)"*  *   *  *  *         *  *   *  *     *      *"); printf(PCOLOR(Y)"       -\n"); printf(PCOLOR(V));

    printf("-     "); printf(PCOLOR(C)"*    *    *  *         *    *    *   *          *"); printf(PCOLOR(V)"     -\n"); printf(PCOLOR(Y));

    printf("-     "); printf(PCOLOR(C)"*         *  *         *         *   *          *"); printf(PCOLOR(Y)"     -\n"); printf(PCOLOR(V));

    printf("-     "); printf(PCOLOR(C)"*         *  ********  *         *   *          *"); printf(PCOLOR(V)"     -\n"); printf(PCOLOR(Y));

    printf("-     "); printf(PCOLOR(C)"*         *  *         *         *   *          *"); printf(PCOLOR(Y)"     -\n"); printf(PCOLOR(V));

    printf("-     "); printf(PCOLOR(C)"*         *  *         *         *   *          *"); printf(PCOLOR(V)"     -\n"); printf(PCOLOR(Y));

    printf("-     "); printf(PCOLOR(C)"*         *  *         *         *     *      *"); printf(PCOLOR(Y)"       -\n"); printf(PCOLOR(V));

    printf("-     "); printf(PCOLOR(C)"*         *  ********  *         *       ****"); printf(PCOLOR(V)"         -\n"); printf(PCOLOR(Y));

    printf("-                                                           -\n"); printf(PCOLOR(V));

    printf("-                                                           -\n"); printf(PCOLOR(Y));

    printf("-                                                           -\n"); printf(PCOLOR(V));

    printf("-                                                           -\n"); printf(PCOLOR(Y));

    printf("-                                                           -\n"); printf(PCOLOR(V));

    printf("-       "); printf(PCOLOR(C)"********       *******          *****"); printf(PCOLOR(V)"               -\n"); printf(PCOLOR(Y));

    printf("-       "); printf(PCOLOR(C)"*       *      *      *       *"); printf(PCOLOR(Y)"                     -\n"); printf(PCOLOR(V));

    printf("-       "); printf(PCOLOR(C)"*        *     *      *     *"); printf(PCOLOR(V)"                       -\n"); printf(PCOLOR(Y));

    printf("-       "); printf(PCOLOR(C)"*       *      *      *   *"); printf(PCOLOR(Y)"                         -\n"); printf(PCOLOR(V));

    printf("-       "); printf(PCOLOR(C)"********       *******    *       ********"); printf(PCOLOR(V)"          -\n"); printf(PCOLOR(Y));

    printf("-       "); printf(PCOLOR(C)"*       *      *          *               *"); printf(PCOLOR(Y)"         -\n"); printf(PCOLOR(V));

    printf("-       "); printf(PCOLOR(C)"*        *     *            *           *"); printf(PCOLOR(V)"           -\n"); printf(PCOLOR(Y));

    printf("-       "); printf(PCOLOR(C)"*         *    *              *       *"); printf(PCOLOR(Y)"             -\n"); printf(PCOLOR(V));

    printf("-       "); printf(PCOLOR(C)"*          *   *                *****"); printf(PCOLOR(V)"               -\n"); printf(PCOLOR(Y));

    printf("-                                                           -\n"); printf(PCOLOR(V));

    printf("-                                                           -\n"); printf(PCOLOR(Y));

    printf("-                                                           -\n"); printf(PCOLOR(V));

    printf("-                                                           -\n"); printf(PCOLOR(Y));

    printf("-                    "); printf(PCOLOR(C)"Press Enter"); printf(PCOLOR(Y)"                            -\n"); printf(PCOLOR(V));

    printf("-                    "); printf(PCOLOR(C)"to continue"); printf(PCOLOR(V)"                            -\n"); printf(PCOLOR(Y));

    printf("-                                                           -\n"); printf(PCOLOR(V));

    printf("-                                                           -\n"); printf(PCOLOR(Y));

    printf("-------------------------------------------------------------\n"); printf(PCOLOR(S));

    scanf("%c");

     
